"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[229],{7486:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var i=n(87462),a=n(63366),o=(n(67294),n(3905)),r=["components"],l={sidebar_position:1,title:"Basic Usage"},s=void 0,c={unversionedId:"Usage/the-basics",id:"Usage/the-basics",isDocsHomePage:!1,title:"Basic Usage",description:"Portal is designed to be simple and friendly. The front-facing API consists of minimal methods that allow you to do a great deal with the underlying architecture.",source:"@site/docs/Usage/the-basics.md",sourceDirName:"Usage",slug:"/Usage/the-basics",permalink:"/Portal/docs/Usage/the-basics",editUrl:"https://www.github.com/ShaneButt/Portal/edit/main/docs/Usage/the-basics.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Basic Usage"},sidebar:"defaultSidebar",previous:{title:"Wally Installation",permalink:"/Portal/docs/Installation/wally"}},d=[{value:"Context Definitions",id:"context-definitions",children:[],level:2},{value:"Subscription Definitions",id:"subscription-definitions",children:[],level:2}],p={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Portal is designed to be simple and friendly. The front-facing API consists of minimal methods that allow you to do a great deal with the underlying architecture."),(0,o.kt)("h2",{id:"context-definitions"},"Context Definitions"),(0,o.kt)("p",null,"Context Definitions represent RemoteEvent's and are used to traffic your client-server networking. While they represent RemoteEvent's they are simple Data that wraps around them.\nA great way to define your context-actions is by using a definition module, the practice is to call this ",(0,o.kt)("inlineCode",{parentName:"p"},"portal.contexts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="demo/server/portal.contexts.lua"',title:'"demo/server/portal.contexts.lua"'},'--// ...Portal imports\nlocal Contexts = {\n    Server = Portal:Context("Server"),\n    Client = Portal:Context("Client"),\n    Player = Portal:Context("Player"),\n    Economy = Portal:Context("Economy")\n}\n\nreturn Contexts\n')),(0,o.kt)("p",null,"In practice this is located in ",(0,o.kt)("inlineCode",{parentName:"p"},"ServerScriptService")," and is ",(0,o.kt)("inlineCode",{parentName:"p"},"require"),"d into your server-side script that is using Portal; this will initialise the events within a ",(0,o.kt)("inlineCode",{parentName:"p"},"Portal")," folder inside ",(0,o.kt)("inlineCode",{parentName:"p"},"ReplicatedStorage"),". We keep Contexts hidden behind the server in our demo, it's your choice how you handle this though!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="demo/server/portal.server.lua"',title:'"demo/server/portal.server.lua"'},'--// ...Portal imports\nlocal Contexts = require(ServerScriptService:WaitForChild("portal.contexts"))\nlocal PlayerContext, ClientContext = Contexts.Player, Contexts.Client\n\ngame.Players.PlayerAdded:Connect(function(player)\n    Portal:Publish(PlayerContext.Name, "Joined", { Ping = "Pong", JoinedPlayer = player })\nend)\n\nlocal subscription = Portal:Subscription(ClientContext.Name, "Loaded", function(particle, client)\n    local f = "[Server][Client-Loaded]: Player [%s] has loaded, client pinged with (%s)"\n    local pong = particle.Payload.Ping\n\n    print(f:format(client.Name, pong))\nend)\nlocal subscriber = Portal:Subscribe(subscription)\n')),(0,o.kt)("h2",{id:"subscription-definitions"},"Subscription Definitions"),(0,o.kt)("p",null,"Subscription Definitions represent a way of receiving information, either from the client on the server or vice versa. They wrap around a callback and will fire that given callback when information is received to the Context-Action the Subscription is bound to."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="demo/replicated/portal.subscriptions.lua"',title:'"demo/replicated/portal.subscriptions.lua"'},'--// ...Portal imports\nlocal Subscriptions = {\n    Client = {\n        PlayerJoined = Portal:Subscription("Player", "Joined", function(particle)\n            local f = "[Client][Player-Joined]: Player [%s] %s joined the server, server pinged with (%s)."\n            local payload = particle.Payload\n            local joined = payload.JoinedPlayer\n            local pong = payload.Ping\n            local localPlayer = joined == Player and "(LocalPlayer)" or ""\n            print(f:format(joined.Name, localPlayer, pong))\n        end),\n    },\n\n    Server = {\n        ClientLoaded = Portal:Subscription("Client", "Loaded", function(particle, client)\n            local f = "[Server][Client-Loaded]: Player [%s] has loaded, client pinged with (%s)"\n            local pong = particle.Payload.Ping\n\n            print(f:format(client.Name, pong))\n        end)\n    }\n}\n\nreturn Subscriptions\n')),(0,o.kt)("p",null,"From this then, we could do something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="demo/client/portal.client.lua"',title:'"demo/client/portal.client.lua"'},'--// ...Portal imports\nlocal Subscriptions = require(ReplicatedStorage:WaitForChild("portal.subscriptions"))\n\nlocal PlayerJoined = Subscriptions.Client.PlayerJoined\n\nlocal joinedSubscriber = Portal:Subscribe(PlayerJoined)\n\nPortal:Publish("Client", "Loaded", { Ping = "Pong!" })\n\nPlayers.PlayerAdded:Connect(function(player)\n    if #Players:GetPlayers() == 2 then\n        joinedSubscriber()\n    end\n    print("No notification for:", player)\nend)\n')),(0,o.kt)("p",null,"... Which will then subscribe to the Subscription's corresponding Context through Portal's Wormhole."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Subscribing directly to a subscription, only sets the callback, if you wish to 'activate' a subscription, you must subscribe to a context object."))))}u.isMDXComponent=!0}}]);