"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[82],{28524:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Will instantiate a new Wormhole with the given list of middleware.","params":[{"name":"middleware","desc":"A list of middleware - found in `Portal/Wormhole/Middleware` - to be used by the new Wormhole.","lua_type":"{string}"}],"returns":[{"desc":"The new Wormhole.","lua_type":"IWormhole"}],"function_type":"static","source":{"line":52,"path":"src/Wormhole/init.lua"}},{"name":"like","desc":"Compare an object to an IWormhole using a non-strict likeness type check.","params":[{"name":"obj","desc":"The object to compare.","lua_type":"any"}],"returns":[{"desc":"`true` if IWormhole-like, `false` otherwise.","lua_type":"(boolean, string?)"}],"function_type":"static","source":{"line":66,"path":"src/Wormhole/init.lua"}},{"name":"addContext","desc":"Will either retrieve an existing Context, or insantiates a new one with the given name.","params":[{"name":"wormhole","desc":"The Wormhole being used.","lua_type":"IWormhole"},{"name":"context","desc":"The name of the Context to find or make.","lua_type":"string"}],"returns":[{"desc":"The Context object found or made.","lua_type":"IContext"}],"function_type":"static","source":{"line":78,"path":"src/Wormhole/init.lua"}},{"name":"makeSubscription","desc":"Will make a new Subscription to the given Context-Action and attaches a callback to be run when the Context-Action receives data.","params":[{"name":"context","desc":"The name of the Context to find or make.","lua_type":"string"},{"name":"action","desc":"The action to make a subscription to.","lua_type":"string"},{"name":"callback?","desc":"The callback to attach to the subscription.","lua_type":"(particle: IParticle, sender: Player?) -> ()?"}],"returns":[{"desc":"","lua_type":"IContext - The Context object found or made."}],"function_type":"static","source":{"line":98,"path":"src/Wormhole/init.lua"}},{"name":"subscribe","desc":"Will subscribe to the given Subscription\'s Context and ","params":[{"name":"wormhole","desc":"The Wormhole being used.","lua_type":"IWormhole"},{"name":"subscription","desc":"The Subscription to subscribe to","lua_type":"ISubscription"},{"name":"callback","desc":"The callback to run when the Context/Action is published to.","lua_type":"(particle: IParticle, sender: Player?) -> ()"}],"returns":[{"desc":"The unsubscriber function, used to disconnect the connection to the RemoteEvent made by this subscriber.","lua_type":"() -> ()"}],"function_type":"static","source":{"line":115,"path":"src/Wormhole/init.lua"}},{"name":"applyMiddleware","desc":"Will run data through the given Wormhole\'s middleware, transforming the data into an [IParticle](/api/Portal#IParticle).","params":[{"name":"wormhole","desc":"The Wormhole being used.","lua_type":"IWormhole"},{"name":"portal","desc":"A dictionary with two fields: Context and Action, which are the names of the Context-Action being targeted.","lua_type":"{[string]: string}"},{"name":"data","desc":"The data to feed through the middleware.","lua_type":"{[string]: any}"}],"returns":[{"desc":"The particle made using the data sent produced by the final middleware step, [ChargeParticle](/api/ChargeParticle).","lua_type":"IParticle"}],"function_type":"static","source":{"line":135,"path":"src/Wormhole/init.lua"}},{"name":"dispatch","desc":"Dispatches data to the given Context-Action through transforming the data through the middleware and eventually Publishing to the Context.","params":[{"name":"wormhole","desc":"The Wormhole being used.","lua_type":"IWormhole"},{"name":"context","desc":"The Context object to publish to.","lua_type":"IContext"},{"name":"action","desc":"The action to action to dispatch to.","lua_type":"string"},{"name":"data","desc":"The data you are sending through the Wormhole","lua_type":"{[string]: any}"},{"name":"target?","desc":"The player recieving this data, or all clients (if performed on the server and nil). If performed on the client will be received by the server if not specified.","lua_type":"Player"}],"returns":[],"function_type":"static","source":{"line":150,"path":"src/Wormhole/init.lua"}}],"properties":[{"name":"_Storage","desc":"The location of the Remote storage, `ReplicatedStorage.Portal`.","lua_type":"Folder","readonly":true,"source":{"line":34,"path":"src/Wormhole/init.lua"}},{"name":"_Contexts","desc":"A collection of Context objects managed by this Wormhole.","lua_type":"{[string]: IContext}","source":{"line":41,"path":"src/Wormhole/init.lua"}}],"types":[],"name":"Wormhole","desc":"If [Portal](/api/Portal) is the gateway into the framework, think of Wormhole as being the magic black box of the framework that handles the communication between the client and server.","source":{"line":26,"path":"src/Wormhole/init.lua"}}')}}]);