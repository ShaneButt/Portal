"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[382],{99398:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Will instantiate a new Context object. If not made through Wormhole (directly using `Context.new(\\"\\")`, this will exist outside of Portal\'s bounds.","params":[{"name":"name","desc":"The name to give this Context","lua_type":"string"}],"returns":[{"desc":"The new Context object.","lua_type":"IContext"}],"function_type":"static","source":{"line":33,"path":"src/Context.lua"}},{"name":"like","desc":"Compare an object to an IContext using a non-strict likeness type check.","params":[{"name":"obj","desc":"The object to compare","lua_type":"any"}],"returns":[{"desc":"`true` if IContext-like, `false` otherwise.","lua_type":"(boolean, string?)"}],"function_type":"static","source":{"line":61,"path":"src/Context.lua"}},{"name":"Subscribe","desc":"Will attach a callback to a given Subscription and `Connect` to Context\'s RemoteEvent.\\n\\nCallback\'s are only fired if certain conditions are met:\\n- The Subscription passed must associate with the Context used to call this method,\\n- When the Context is published to (firing the RemoteEvent), the Action within the Particle must match the action of the subscription passed,\\n- The Subscription\'s action must belong within the Context\'s actions.","params":[{"name":"subscription","desc":"The subscription to subscribe to.","lua_type":"ISubscription"},{"name":"callback:","desc":"The callback function to run when the Context gets published to.","lua_type":"(particle: IParticle, target: Player?) -> ()"}],"returns":[{"desc":"The unsubscriber method, which will disconnect the connection to the RemoteEvent.","lua_type":"() -> ()"}],"function_type":"method","source":{"line":78,"path":"src/Context.lua"}},{"name":"Publish","desc":"This method will fire a remote event relating to the given action and will send the Particle - must have gone through middleware and have been charrged by the ChargeParticle middleware - through it.","params":[{"name":"action","desc":"The action to Publish to","lua_type":"string"},{"name":"particle","desc":"the data, sent through middleware and charged, to fire through the Remote.","lua_type":"IParticle"},{"name":"target","desc":"The player, or the server if nil, triggering the publishing.","lua_type":"Player?"}],"returns":[],"function_type":"method","source":{"line":130,"path":"src/Context.lua"}},{"name":"Destroy","desc":"This will Destroy the Context and cleanup it\'s connections.","params":[],"returns":[],"function_type":"method","source":{"line":149,"path":"src/Context.lua"}}],"properties":[],"types":[],"name":"Context","desc":"A Context can be thought of as a collection of actions wherein you can send messages between the client and the server.\\n\\n A Context has a list of it\'s subscribers and actions, it can also listen to and send messages to RemoteEvents, and can even be Destroyed in order to clean up it\'s connections.","source":{"line":23,"path":"src/Context.lua"}}')}}]);