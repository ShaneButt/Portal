[{"title":"Middleware","type":0,"sectionRef":"#","url":"api/Middleware","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Middleware","url":"api/Middleware#functions","content":" "},{"title":"load​","type":1,"pageTitle":"Middleware","url":"api/Middleware#load","content":"&lt;/&gt; Middleware.load( middleware: {string}-- A list of middleware, by name, to be loaded into the Middleware's pipeline. ) → Middleware Instantiates a new Middleware and loads the given middleware into its pipeline.  "},{"title":"Warp​","type":1,"pageTitle":"Middleware","url":"api/Middleware#Warp","content":"&lt;/&gt; Middleware:Warp( data: {[string]: any},-- The data being sent through the middleware pipeline. portal: {[string]: string},-- A dictionary with two fields: Context and Action which are the names of the Context-Action being targeted. pipeline: {( data: {[string]: any}, portal: {[string]: string} ) → IParticle}-- A list of middleware functions that take data and portal as arguments. ) → IParticle-- The resulting Particle, after going through the middleware and being Charged. Transforms the data being sent and sends it through the middleware's pipeline. "},{"title":"Subscription","type":0,"sectionRef":"#","url":"api/Subscription","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Subscription","url":"api/Subscription#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Subscription","url":"api/Subscription#new","content":"&lt;/&gt; Subscription.new( context: string,-- The name of the Context this Subscription is (or will be) linked to. action: string,-- The action this Subscription is listening to. callback: ( particle: IParticle, sender: Player? ) → ()?-- The callback to be ran when the Context receives data. ) → ISubscription-- The new Subscription object. Will instantiate a new Subscription object to link to a Context.  "},{"title":"like​","type":1,"pageTitle":"Subscription","url":"api/Subscription#like","content":"&lt;/&gt; Subscription.like( obj: any-- The object to compare ) → ( boolean, string? )-- true if ISubscription-like, false otherwise. Compare an object to an ISubscription using a non-strict likeness type check.  "},{"title":"Subscribe​","type":1,"pageTitle":"Subscription","url":"api/Subscription#Subscribe","content":"&lt;/&gt; Subscription:Subscribe( callback: ( particle: IParticle, sender: Player ) → ()-- The callback to run when the Subscription 'hears' from the Context-Action. ) → () Attach a callback to this Subscription to be run when the Context-Action this Subscription is bound to recieves a message. "},{"title":"Type Improvements!","type":0,"sectionRef":"#","url":"blog/2021/12/10/type-coverage-improvements","content":"This update to Portal brings about a bunch of changes and redesign to the typing of Portal and its necessary parts. This blog post is currently being documented!","keywords":""},{"title":"Portal Release!","type":0,"sectionRef":"#","url":"blog/2021/12/20/portal-release","content":"","keywords":""},{"title":"Roadmap​","type":1,"pageTitle":"Portal Release!","url":"blog/2021/12/20/portal-release#roadmap","content":"Work with Portal and port Arvorian Industries gun scripts to use Portal instead of RemoteEvents.Fix bugs during the porting of AI gun scripts.Research and potentially provide RemoteFunction and Signal support.Finish SimpleRodux and TypeCheck middleware.Finish up the Demo place and include an example of defining Contexts. "},{"title":"Changes since 0.2.0-beta​","type":1,"pageTitle":"Portal Release!","url":"blog/2021/12/20/portal-release#changes-since-020-beta","content":"Boy, this is a long one. We have a metric ton of Luau type coverage improvements. A boat-load of fixes and improvements to the Wormhole, Context, and Subscription classes. Fleshed out Middleware &amp; support for custom middleware. Runtime type-checking and improvements to Portal Types. Fixes to front-facing API. Source Docs &amp; auto-generated API docs using Moonwave. Documentation for Installation, Usage, and more, built using Moonwave. Published to Wally under shanebutt/portal@0.5.0. "},{"title":"Portal","type":0,"sectionRef":"#","url":"api/Portal","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Portal","url":"api/Portal#types","content":" "},{"title":"IContext​","type":1,"pageTitle":"Portal","url":"api/Portal#IContext","content":"&lt;/&gt; interface IContext { Name: string-- The Name of the Context. Remote: RemoteEvent -- The RemoteEvent this Context owns. Actions: {string}-- A list of actions that belong to this Context. Subscriptions: {[() → ()]: ISubscription}-- A dictionary of unsubscriber function for the keys and their associated Subscriptions as values. }   "},{"title":"IParticle​","type":1,"pageTitle":"Portal","url":"api/Portal#IParticle","content":"&lt;/&gt; interface IParticle { Context: string-- The Context this Particle was sent to. Action: string-- The Action this Particle was sent to. Timestamp: DateTime-- The Timestamp this Particle was sent at. Payload: {[string]: any}-- The Payload belonging to this Particle. }   "},{"title":"ISubscription​","type":1,"pageTitle":"Portal","url":"api/Portal#ISubscription","content":"&lt;/&gt; interface ISubscription { Context: string-- The name of the context this subscription is for. Action: string-- The name of the action this subscription is listening to. Callback: ( particle: IParticle, sender: Player? ) → ()-- The function to call when the subscription is published to. }   "},{"title":"IWormhole​","type":1,"pageTitle":"Portal","url":"api/Portal#IWormhole","content":"&lt;/&gt; interface IWormhole { _Storage: Folder -- The storage folder for Portal's RemoteEvents. _Contexts: {[string]: IContext}-- The Context managed by this Wormhole. Middleware: any-- The Middleware pipeline of this Wormhole. }  "},{"title":"Properties​","type":1,"pageTitle":"Portal","url":"api/Portal#properties","content":" "},{"title":"Wormhole​","type":1,"pageTitle":"Portal","url":"api/Portal#Wormhole","content":"&lt;/&gt; Portal.Wormhole: IWormhole The Wormhole bound to this Portal. "},{"title":"Functions​","type":1,"pageTitle":"Portal","url":"api/Portal#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Portal","url":"api/Portal#new","content":"&lt;/&gt; Portal.new( middleware?: {string}-- A list of middleware names to install with Portal. ) → Portal-- a Portal instance. Will instantiate a new Portal with the given middleware.  "},{"title":"Context​","type":1,"pageTitle":"Portal","url":"api/Portal#Context","content":"&lt;/&gt; Portal:Context( context: string-- The name of the context to retrieve or make. ) → IContext-- the IContext object with the given name. Will retrieve an IContext from a given input string if it exists, or creates a new one otherwise.  "},{"title":"Subscription​","type":1,"pageTitle":"Portal","url":"api/Portal#Subscription","content":"&lt;/&gt; Portal:Subscription( context: string,-- The name of the context to make a subscription to. action: string,-- The action to make a subcription to. cb?: ( particle: IParticle, target: Player? ) → ()-- The callback to run when the Context/Action is published to. ) → ISubscription-- the ISubscription object created. Will make an ISubscription from given inputs.  "},{"title":"Subscribe​","type":1,"pageTitle":"Portal","url":"api/Portal#Subscribe","content":"&lt;/&gt; Portal:Subscribe( sub: ISubscription,-- The subscription to subscribe with context: string?,-- The name of the context to make a subscription to, to subscribe with. action: string?,-- The action to subscribe to. cb: ( particle: IParticle, target: Player? ) → ()-- The callback to run when the Context/Action is published to. ) → () → ()-- The unsubscriber function used to disconnect the subscription from the RemoveEvent. Used to retrieve the listener function and subscribe to a context for events when actions are dispatched. Can be made either with an existing ISubscription or from inputs to make a new one.  "},{"title":"Publish​","type":1,"pageTitle":"Portal","url":"api/Portal#Publish","content":"&lt;/&gt; Portal:Publish( context: string,-- The name of the context to publish to. action: string,-- The action to publish to. data: {[string]: any},-- The data you are sending through the remote. target?: Player -- the target, or nil from the server, triggering the event. ) → () Will initate the Publish sequence, transforming the data sent through the middleware pipeline, and eventually dispatching to the Context/Action RemoteEvent.  "},{"title":"Warp​","type":1,"pageTitle":"Portal","url":"api/Portal#Warp","content":"&lt;/&gt; Portal:Warp( context: IContext,-- The context to warp data through. action: string,-- The action being targeted. data: {[string]: any}-- The data to warp (transform). ) → IParticle-- All data sent through the middleware will return an IParticle object. Will Warp (apply middleware to) the data you wish to transmit through the context/action. "},{"title":"Wormhole","type":0,"sectionRef":"#","url":"api/Wormhole","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Wormhole","url":"api/Wormhole#properties","content":" "},{"title":"_Storage​","type":1,"pageTitle":"Wormhole","url":"api/Wormhole#_Storage","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Wormhole._Storage: Folder  The location of the Remote storage, ReplicatedStorage.Portal.  "},{"title":"_Contexts​","type":1,"pageTitle":"Wormhole","url":"api/Wormhole#_Contexts","content":"&lt;/&gt; Wormhole._Contexts: {[string]: IContext} A collection of Context objects managed by this Wormhole. "},{"title":"Functions​","type":1,"pageTitle":"Wormhole","url":"api/Wormhole#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Wormhole","url":"api/Wormhole#new","content":"&lt;/&gt; Wormhole.new( middleware: {string}-- A list of middleware - found in Portal/Wormhole/Middleware - to be used by the new Wormhole. ) → IWormhole-- The new Wormhole. Will instantiate a new Wormhole with the given list of middleware.  "},{"title":"like​","type":1,"pageTitle":"Wormhole","url":"api/Wormhole#like","content":"&lt;/&gt; Wormhole.like( obj: any-- The object to compare. ) → ( boolean, string? )-- true if IWormhole-like, false otherwise. Compare an object to an IWormhole using a non-strict likeness type check.  "},{"title":"addContext​","type":1,"pageTitle":"Wormhole","url":"api/Wormhole#addContext","content":"&lt;/&gt; Wormhole.addContext( wormhole: IWormhole,-- The Wormhole being used. context: string-- The name of the Context to find or make. ) → IContext-- The Context object found or made. Will either retrieve an existing Context, or insantiates a new one with the given name.  "},{"title":"makeSubscription​","type":1,"pageTitle":"Wormhole","url":"api/Wormhole#makeSubscription","content":"&lt;/&gt; Wormhole.makeSubscription( context: string,-- The name of the Context to find or make. action: string,-- The action to make a subscription to. callback?: ( particle: IParticle, sender: Player? ) → ()?-- The callback to attach to the subscription. ) → IContext-TheContextobjectfoundormade. Will make a new Subscription to the given Context-Action and attaches a callback to be run when the Context-Action receives data.  "},{"title":"subscribe​","type":1,"pageTitle":"Wormhole","url":"api/Wormhole#subscribe","content":"&lt;/&gt; Wormhole.subscribe( wormhole: IWormhole,-- The Wormhole being used. subscription: ISubscription,-- The Subscription to subscribe to callback: ( particle: IParticle, sender: Player? ) → ()-- The callback to run when the Context/Action is published to. ) → () → ()-- The unsubscriber function, used to disconnect the connection to the RemoteEvent made by this subscriber. Will subscribe to the given Subscription's Context and  "},{"title":"applyMiddleware​","type":1,"pageTitle":"Wormhole","url":"api/Wormhole#applyMiddleware","content":"&lt;/&gt; Wormhole.applyMiddleware( wormhole: IWormhole,-- The Wormhole being used. portal: {[string]: string},-- A dictionary with two fields: Context and Action, which are the names of the Context-Action being targeted. data: {[string]: any}-- The data to feed through the middleware. ) → IParticle-- The particle made using the data sent produced by the final middleware step, ChargeParticle. Will run data through the given Wormhole's middleware, transforming the data into an IParticle.  "},{"title":"dispatch​","type":1,"pageTitle":"Wormhole","url":"api/Wormhole#dispatch","content":"&lt;/&gt; Wormhole.dispatch( wormhole: IWormhole,-- The Wormhole being used. context: IContext,-- The Context object to publish to. action: string,-- The action to action to dispatch to. data: {[string]: any},-- The data you are sending through the Wormhole target?: Player -- The player recieving this data, or all clients (if performed on the server and nil). If performed on the client will be received by the server if not specified. ) → () Dispatches data to the given Context-Action through transforming the data through the middleware and eventually Publishing to the Context. "},{"title":"Context","type":0,"sectionRef":"#","url":"api/Context","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Context","url":"api/Context#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Context","url":"api/Context#new","content":"&lt;/&gt; Context.new( name: string-- The name to give this Context ) → IContext-- The new Context object. Will instantiate a new Context object. If not made through Wormhole (directly using Context.new(&quot;&quot;), this will exist outside of Portal's bounds.  "},{"title":"like​","type":1,"pageTitle":"Context","url":"api/Context#like","content":"&lt;/&gt; Context.like( obj: any-- The object to compare ) → ( boolean, string? )-- true if IContext-like, false otherwise. Compare an object to an IContext using a non-strict likeness type check.  "},{"title":"Subscribe​","type":1,"pageTitle":"Context","url":"api/Context#Subscribe","content":"&lt;/&gt; Context:Subscribe( subscription: ISubscription,-- The subscription to subscribe to. callback:: ( particle: IParticle, target: Player? ) → ()-- The callback function to run when the Context gets published to. ) → () → ()-- The unsubscriber method, which will disconnect the connection to the RemoteEvent. Will attach a callback to a given Subscription and Connect to Context's RemoteEvent. Callback's are only fired if certain conditions are met: The Subscription passed must associate with the Context used to call this method, When the Context is published to (firing the RemoteEvent), the Action within the Particle must match the action of the subscription passed, The Subscription's action must belong within the Context's actions.  "},{"title":"Publish​","type":1,"pageTitle":"Context","url":"api/Context#Publish","content":"&lt;/&gt; Context:Publish( action: string,-- The action to Publish to particle: IParticle,-- the data, sent through middleware and charged, to fire through the Remote. target: Player? -- The player, or the server if nil, triggering the publishing. ) → () This method will fire a remote event relating to the given action and will send the Particle - must have gone through middleware and have been charrged by the ChargeParticle middleware - through it.  "},{"title":"Destroy​","type":1,"pageTitle":"Context","url":"api/Context#Destroy","content":"&lt;/&gt; Context:Destroy() → () This will Destroy the Context and cleanup it's connections. "},{"title":"Wally Installation","type":0,"sectionRef":"#","url":"docs/Installation/wally","content":"Wally Installation To install Portal through Wally you must first install &amp; setup Wally. Once you have installed Wally, you will need to create a new file in the root of your project (top-level) called wally.toml, then add the shanebutt/portal@ver to your [dependencies]. It should look something like this: wally.toml [dependencies] Portal = &quot;shanebutt/portal@0.2.0-beta&quot; Copy Once you have done this, you can run:wally install This will finally add Portal as a dependency located in the Packages folder created in the root of your directory.","keywords":""},{"title":"Getting Started with Portal","type":0,"sectionRef":"#","url":"docs/intro","content":"Getting Started with Portal To familiarise yourself you can read the following links: InstallationUsage GuideAPI Docs Portal Portal is an easier way of thinking and working when it comes to networking on Roblox. Hook up to Context-Actions - typically referred to as Channel-Topics - and send and receive messages. Navigating to specific RemoteEvents is ancient history.","keywords":""},{"title":"Build via Rojo","type":0,"sectionRef":"#","url":"docs/Installation/source","content":"Build via Rojo Head on over to the Portal Github Releases, and download the latest build. You will need to have Rojo 7.0 installed. Download either the zip file or the .rbxm file from the releases above into a common directory for quick access,Copy these files into your Rojo-project, inside your ReplicatedStorage folder,Ensure your Rojo project JSON file is tracking the folder or the file(s)! Insert File via Studio Again, you will need to go to the latest release, however, you must install the rbxm file, from there, open your project in Roblox Studio, then insert the Portal rbxm into ReplicatedStorage: Download the rbxm file from the release page above into a common directory for quick access,Open your project/experience in Roblox StudioRight-click on ReplicatedStorage, or a folder within of your choosing, and select &quot;Insert into from file...&quot;,Select and insert the &quot;portal.rbxm&quot; file,A new ModuleScript named &quot;Portal&quot; should now be inserted into your project!","keywords":""},{"title":"Basic Usage","type":0,"sectionRef":"#","url":"docs/Usage/the-basics","content":"","keywords":""},{"title":"Context Definitions​","type":1,"pageTitle":"Basic Usage","url":"docs/Usage/the-basics#context-definitions","content":"Context Definitions represent RemoteEvent's and are used to traffic your client-server networking. While they represent RemoteEvent's they are simple Data that wraps around them. A great way to define your context-actions is by using a definition module, the practice is to call this portal.contexts: demo/server/portal.contexts.lua --// ...Portal imports local Contexts = { Server = Portal:Context(&quot;Server&quot;), Client = Portal:Context(&quot;Client&quot;), Player = Portal:Context(&quot;Player&quot;), Economy = Portal:Context(&quot;Economy&quot;) } return Contexts Copy In practice this is located in ServerScriptService and is required into your server-side script that is using Portal; this will initialise the events within a Portal folder inside ReplicatedStorage. We keep Contexts hidden behind the server in our demo, it's your choice how you handle this though! demo/server/portal.server.lua --// ...Portal imports local Contexts = require(ServerScriptService:WaitForChild(&quot;portal.contexts&quot;)) local PlayerContext, ClientContext = Contexts.Player, Contexts.Client game.Players.PlayerAdded:Connect(function(player) Portal:Publish(PlayerContext.Name, &quot;Joined&quot;, { Ping = &quot;Pong&quot;, JoinedPlayer = player }) end) local subscription = Portal:Subscription(ClientContext.Name, &quot;Loaded&quot;, function(particle, client) local f = &quot;[Server][Client-Loaded]: Player [%s] has loaded, client pinged with (%s)&quot; local pong = particle.Payload.Ping print(f:format(client.Name, pong)) end) local subscriber = Portal:Subscribe(subscription) Copy "},{"title":"Subscription Definitions​","type":1,"pageTitle":"Basic Usage","url":"docs/Usage/the-basics#subscription-definitions","content":"Subscription Definitions represent a way of receiving information, either from the client on the server or vice versa. They wrap around a callback and will fire that given callback when information is received to the Context-Action the Subscription is bound to. demo/replicated/portal.subscriptions.lua --// ...Portal imports local Subscriptions = { Client = { PlayerJoined = Portal:Subscription(&quot;Player&quot;, &quot;Joined&quot;, function(particle) local f = &quot;[Client][Player-Joined]: Player [%s] %s joined the server, server pinged with (%s).&quot; local payload = particle.Payload local joined = payload.JoinedPlayer local pong = payload.Ping local localPlayer = joined == Player and &quot;(LocalPlayer)&quot; or &quot;&quot; print(f:format(joined.Name, localPlayer, pong)) end), }, Server = { ClientLoaded = Portal:Subscription(&quot;Client&quot;, &quot;Loaded&quot;, function(particle, client) local f = &quot;[Server][Client-Loaded]: Player [%s] has loaded, client pinged with (%s)&quot; local pong = particle.Payload.Ping print(f:format(client.Name, pong)) end) } } return Subscriptions Copy From this then, we could do something like this: demo/client/portal.client.lua --// ...Portal imports local Subscriptions = require(ReplicatedStorage:WaitForChild(&quot;portal.subscriptions&quot;)) local PlayerJoined = Subscriptions.Client.PlayerJoined local joinedSubscriber = Portal:Subscribe(PlayerJoined) Portal:Publish(&quot;Client&quot;, &quot;Loaded&quot;, { Ping = &quot;Pong!&quot; }) Players.PlayerAdded:Connect(function(player) if #Players:GetPlayers() == 2 then joinedSubscriber() end print(&quot;No notification for:&quot;, player) end) Copy ... Which will then subscribe to the Subscription's corresponding Context through Portal's Wormhole. caution Subscribing directly to a subscription, only sets the callback, if you wish to 'activate' a subscription, you must subscribe to a context object. "}]